/*
 * Copyright Â© 2022 Mark Raynsford <code@io7m.com> https://www.io7m.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package com.io7m.jsycamore.generation;

import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Properties;

import static java.lang.System.err;
import static java.lang.System.out;

/**
 * Code to generate the main keycode enumeration.
 */

public final class SyKeycodeGenerationMain
{
  private SyKeycodeGenerationMain()
  {

  }

  /**
   * Code to generate the main keycode enumeration.
   *
   * @param args Command-line arguments
   *
   * @throws Exception On errors
   */

  public static void main(
    final String[] args)
    throws Exception
  {
    if (args.length != 1) {
      err.println("Usage: output.java");
      throw new IllegalArgumentException();
    }

    final var properties = new Properties();
    try (var stream = SyKeycodeGenerationMain.class.getResourceAsStream(
      "/com/io7m/jsycamore/generation/keycodes.properties")) {
      properties.load(stream);
    }

    final var ordered =
      properties.keySet()
        .stream()
        .map(Object::toString).sorted()
        .toList();

    final var outputFile = Paths.get(args[0]).toAbsolutePath();
    Files.createDirectories(outputFile.getParent());

    out.println("Writing " + outputFile);

    try (var outputStream = Files.newOutputStream(
      outputFile,
      StandardOpenOption.TRUNCATE_EXISTING,
      StandardOpenOption.CREATE,
      StandardOpenOption.WRITE
    )) {
      try (var out = new PrintStream(
        outputStream,
        false,
        StandardCharsets.UTF_8)) {

        try (var stream = SyKeycodeGenerationMain.class.getResourceAsStream(
          "/com/io7m/jsycamore/generation/license.txt")) {
          stream.transferTo(out);
        }

        out.printf("\n");
        out.printf("package com.io7m.jsycamore.api.keyboard;\n");
        out.printf("/** The set of keycodes understood by the UI. */\n");
        out.printf(
          "/* This file is generated by SyKeycodeGenerationMain.java; do not edit! */\n");
        out.printf("public enum SyKeyCode\n{\n");
        for (final var key : ordered) {
          out.printf("  /** Key: %s */\n", key);
          out.printf("  SY_%s(%s),\n", key, properties.getProperty(key));
        }
        out.printf("  ;\n");
        out.printf("  private final int keyCode;\n");
        out.printf("  /** @return The keycode. */\n");
        out.printf("  public int keyCode() { return this.keyCode; }\n");
        out.printf("  SyKeyCode(int code) {\n");
        out.printf("    this.keyCode = code;\n");
        out.printf("  }\n");
        out.printf("}\n");
        out.flush();
      }
    }
  }
}
