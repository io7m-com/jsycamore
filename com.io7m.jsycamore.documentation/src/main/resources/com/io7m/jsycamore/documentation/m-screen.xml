<?xml version="1.0" encoding="UTF-8" ?>

<Section xmlns="urn:com.io7m.structural:8:0"
         id="81ad4c2b-2348-48cc-8a3d-7b0d247f088c"
         title="Screens">

  <Subsection title="Overview">
    <Paragraph>
      A <Term type="term">screen</Term> is the top-level object in the <Term type="package">jsycamore</Term> package.
      A screen acts as a container for <Link target="cb46abcd-d0b1-41f4-bb95-662186d4aa78">windows</Link>, and provides
      access to various services such as facilities for opening
      <Link target="ddd1079c-f636-4232-bebe-39672a140061">menus</Link>, handling
      <Link target="0aa1b4dd-0803-4c8b-b3ee-68fdc9fbf906">text selections</Link>, etc.
    </Paragraph>
    <Paragraph>
      Most applications will only create a single screen, although there are no restrictions on creating multiple
      screens. Windows (and the components contained within) are confined to a single screen instance, and cannot
      be moved between screen instances.
    </Paragraph>
  </Subsection>

  <Subsection title="Services" id="9f8f2252-fb23-4acc-8dfa-1604669e44de">
    <Paragraph>
      Screen instances expose <Term type="term">service directories</Term>.
      <Link target="0c480fad-ee66-4532-a0b1-f06ebe582ea8">Component</Link> implementations on a given screen
      can obtain references to various services via the screen's service directory. Screens are required to
      provide at least the following mandatory services:
    </Paragraph>
    <FormalItem title="Required Services">
      <Table type="genericTable">
        <Columns>
          <Column>Type</Column>
          <Column>Description</Column>
        </Columns>
        <Row>
          <Cell>SyWindowServiceType</Cell>
          <Cell>
            A service for creating and managing
            <Link target="cb46abcd-d0b1-41f4-bb95-662186d4aa78">windows</Link>.
          </Cell>
        </Row>
        <Row>
          <Cell>SyMenuServiceType</Cell>
          <Cell>
            A service for creating and managing
            <Link target="ddd1079c-f636-4232-bebe-39672a140061">menus</Link>.
          </Cell>
        </Row>
        <Row>
          <Cell>SyTextSelectionServiceType</Cell>
          <Cell>
            A service for managing
            <Link target="0aa1b4dd-0803-4c8b-b3ee-68fdc9fbf906">text selection</Link>.
          </Cell>
        </Row>
      </Table>
    </FormalItem>
  </Subsection>

  <Subsection title="Events" id="03b8a907-42cf-47b1-a72b-4ba9a90a77ae">
    <Subsection title="Output Events">
      <Paragraph>
        A screen provides an
        <LinkExternal
          target="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/Flow.Publisher.html">
          observable stream</LinkExternal> of <Link target="cc1c3bb7-e1e4-41ce-86c1-e52cb4f261d6">output events</Link>
        to which external code may subscribe.
      </Paragraph>
    </Subsection>
    <Subsection title="Input Event Dispatch" id="b097067b-b8d6-4397-bb24-6a48f003e84f">
      <Subsection title="Description">
        <Paragraph>
          When any of the methods on the
          <Term type="class">SyScreenMouseEventsType</Term>
          and
          <Term type="class">SyScreenKeyEventsType</Term>
          interfaces are called, the screen will dispatch appropriate events to
          <Link target="0c480fad-ee66-4532-a0b1-f06ebe582ea8">components</Link>
          inside
          <Link target="cb46abcd-d0b1-41f4-bb95-662186d4aa78">windows</Link>
          that are visible on the screen.
        </Paragraph>
      </Subsection>
      <Subsection title="Mouse Events">
        <Paragraph>
          When dispatching <Link target="ef6bcdaf-a8e3-4752-9744-d6221601262f">mouse events</Link>, the process
          is as follows for an arbitrary mouse event <Term type="variable">e</Term>:
        </Paragraph>
        <FormalItem title="Mouse Event Dispatch">
          <ListOrdered>
            <Item>
              Get a list of the visible <Link target="cb46abcd-d0b1-41f4-bb95-662186d4aa78">windows</Link> in
              <Link target="caab0ac3-f623-457f-986d-312b260f184e">order</Link> such that the frontmost windows
              are at the start of the list, and the rearmost windows are at the end of the list.
            </Item>
            <Item>
              For each window <Term type="variable">w</Term> in the list of visible windows:
              <ListOrdered>
                <Item>
                  If the <Link target="7973aa4f-4fd9-40dd-8d96-0aaa3b4d6147">viewport-space</Link> position
                  of the mouse event (the cursor position) falls within the viewport-space bounds of
                  <Term type="variable">w</Term>, then ask <Term type="variable">w</Term> for the
                  <Link target="1d8361cb-1aa8-408e-820d-4d04c7f3bfab">active</Link>
                  <Link target="0c480fad-ee66-4532-a0b1-f06ebe582ea8">component</Link>
                  <Term type="variable">c</Term> that is overlapped by the cursor. The window implementation
                  is required to return the most specific component for the given position; the component that
                  is deepest within the tree of components for the given position. If there is no
                  appropriate <Term type="variable">c</Term>, then continue on to the next window.
                </Item>
                <Item>
                  Assuming there was an existing component <Term type="variable">c</Term>,
                  call the <Term type="function">eventSend</Term> method on <Term type="variable">c</Term>, passing
                  it the event <Term type="variable">e</Term>. The method will return a value that indicates
                  whether the component <Term type="term">consumed</Term> the event. If the event was consumed,
                  execution stops here. Otherwise, if the event was not consumed, then the
                  <Term type="function">eventSend</Term> method is called on each recursively selected ancestor
                  of <Term type="variable">c</Term> until either one of the ancestors consumes the event, or
                  there are no more ancestors. If the event is consumed, execution stops here. If there are
                  no more ancestors, we return to the first step and try the next visible window.
                </Item>
                <Item>
                  If no component in any of the examined windows consumes <Term type="variable">e</Term>, then
                  <Term type="variable">e</Term> is discarded.
                </Item>
              </ListOrdered>
            </Item>
          </ListOrdered>
        </FormalItem>
        <Paragraph>
          Typically, successfully dispatching a mouse event to a window will result in that window
          becoming <Link target="caab0ac3-f623-457f-986d-312b260f184e">focused</Link>.
        </Paragraph>
      </Subsection>
      <Subsection title="Keyboard Events">
        <Paragraph>
          Keyboard events...
        </Paragraph>
      </Subsection>
    </Subsection>
  </Subsection>
  
  <Subsection title="Theme">
    <Paragraph>
      A screen holds a reference to the current <Link target="6aeefd35-8837-4503-99ee-3ccba984a49e">theme</Link>.
    </Paragraph>
  </Subsection>

  <Subsection title="Viewport" id="f390c685-04c2-4c72-897d-9f28f6027983">
    <Paragraph>
      A screen defines a <Term type="term">viewport</Term> within which are placed
      <Link target="cb46abcd-d0b1-41f4-bb95-662186d4aa78">windows</Link>. The viewport has an explicitly-defined
      size, but this may be freely changed at any point.
    </Paragraph>
    <Paragraph>
      Applications embedding <Term type="package">jsycamore</Term> inside fullscreen applications, or projected
      into 3D spaces, are responsible for translating the platform-specific coordinates produced by keyboard and
      mouse input systems into the correct <Link target="7973aa4f-4fd9-40dd-8d96-0aaa3b4d6147">viewport
      coordinate space</Link>. For example, <Term type="package">jsycamore</Term> can be embedded into 3D scenes
      by casting rays in whatever is the host 3D engine's coordinate space, and then converting the ray/plane
      intersection coordinates to <Term type="package">jsycamore</Term>'s viewport space:
    </Paragraph>
    <FormalItem title="3D Projection">
      <Image source="projectScene.jpg" width="640" height="480">
        3D projection of a jsycamore UI.
      </Image>
    </FormalItem>
  </Subsection>

</Section>
